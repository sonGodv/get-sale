//  Обработка получает заказы с сайта, создаёт новый заказ в справочнике и 
//  формирует расходные накладные на основе полученных данных.
//
//

Var ADOBDConnection, 
	Connected,
	ServerDB,
	Encoding,
	Base,
	Login,
	Password,
	OrdersTable,
	ProductTable, 
	SelectedCustomers,
	ServiceParameters Export;

// 
//   Читает настройки из файла конфигурации. Записавает данные в глобальные переменные
//
//

Procedure DownloadSettings()
	
	//ФС1 = СоздатьОбъект("ФС");
	ПутьКФайлу = КаталогИБ() + "settings.inf";
	ФайлНастроек = Новый Файл(ПутьКФайлу);
	
	
	Если ФайлНастроек.ФайлСуществует() Тогда
		
		Файл = Новый Файл;
		Файл.Открыть(ПутьКФайлу);
		
		Драйвер  = СокрЛП(Файл.ПолучитьСтроку(1)); //  "MySQL ODBC 5.3 Unicode Driver"
		ServerDB   = СокрЛП(Файл.ПолучитьСтроку(2));  //  "109.94.209.16"
		Base     = СокрЛП(Файл.ПолучитьСтроку(3));    //  "caseroom_db"
		Login    = СокрЛП(Файл.ПолучитьСтроку(4));   //  "caseroom_db"
		Password   = СокрЛП(Файл.ПолучитьСтроку(5));   //  "мой_пасс"
		
		Если Файл.ПолучитьСтроку(6) = "1" Тогда
			Encoding = 1;
		КонецЕсли;
		
		Если СокрЛП(Файл.ПолучитьСтроку(7)) = "1" Тогда
			рн = 1;
		КонецЕсли;
		
		// Клиент по умолчанию используемый для формирования накладных
	
		Если СокрЛП(Файл.ПолучитьСтроку(8)) <> "0" тогда
			СпрК = Справочники.Customers.НайтиПоКоду(СокрЛП(Файл.ПолучитьСтроку(8)));
			Если СпрК <> Неопределено Тогда
				SelectedCustomers = СпрК;
			Иначе
				SelectedCustomers = " ";
			КонецЕсли;
		КонецЕсли;
			
		// Основной Склад 
		Если СокрЛП(Файл.ПолучитьСтроку(9)) <> "0" тогда
			СпрС = Справочники.Warehouses.НайтиПоКоду(СокрЛП(Файл.ПолучитьСтроку(9)));
			Если СпрС <> Неопределено Тогда
				ВыбСклады = СпрС;
			Иначе
				ВыбСклады = " ";
			КонецЕсли;
		КонецЕсли;           
			Если СокрЛП(Файл.ПолучитьСтроку(10)) <> "0" тогда
			СпрФ = Справочники.Firms.НайтиПоКоду(СокрЛП(Файл.ПолучитьСтроку(10)));
			Если СпрФ <> Неопределено Тогда
				ВыбФирма = СпрФ;
			Иначе
				ВыбФирма = " ";
			КонецЕсли;
		КонецЕсли;             
		
		morelocale 		= СокрЛП(Файл.ПолучитьСтроку(11)); 	
		ОснЛокаль 		= СокрЛП(Файл.ПолучитьСтроку(12));  		
		ДопЛокаль 		= СокрЛП(Файл.ПолучитьСтроку(13)); 	
		Кей 			= СокрЛП(Файл.ПолучитьСтроку(14));        		
		АйдиЯзык 		= СокрЛП(Файл.ПолучитьСтроку(15));
		Прокси 			= СокрЛП(Файл.ПолучитьСтроку(16)); 
		пСервер 		= СокрЛП(Файл.ПолучитьСтроку(17));
		пПорт 			= СокрЛП(Файл.ПолучитьСтроку(18));
		ФтпСервер 		= СокрЛП(Файл.ПолучитьСтроку(19));
		ФтпЛогин 		= СокрЛП(Файл.ПолучитьСтроку(20));
		ФтпПароль 		= СокрЛП(Файл.ПолучитьСтроку(21));
		КаталогФтп 		= СокрЛП(Файл.ПолучитьСтроку(22));
		КаталогФтпФото 	= СокрЛП(Файл.ПолучитьСтроку(23));
		
	КонецЕсли;
	
КонецПроцедуры

//
// Устанавливает соединения с базой сайта.
//
//

Procedure УстановкаСоединения()
	
	DownloadSettings();
		
	ADOBDConnection = Новый COMОбъект("ADODB.Connection");
	
	Если Encoding = 1 тогда
		КодСтр = "STMT=set character_set_results=cp1251;"
	Иначе
		КодСтр = "";
	КонецЕсли;
	
	СтрокаСоединения = "DRIVER="+СокрЛП(Драйвер)+";SERVER="+СокрЛП(ServerDB)+";DataBase="+СокрЛП(Base)+";UID="+СокрЛП(Login)+";PWD="+СокрЛП(Password)+";"+СокрЛП(КодСтр);
	
	//ADOBDConnection.ConnectionString = (СтрокаСоединения);
	Попытка
		ADOBDConnection.Open(СтрокаСоединения);
		Connected = 1;
	Исключение
		Connected = 0;
		Сообщить("Не могу подключиться к базе!!!");
	КонецПопытки;
	
КонецПроцедуры

//
//  Получает заказы из базы MySQL используя MySQL Connector
//  и записывает в OrdersTable (ТаблицаЗначений, глобальная область видимости)
//

Procedure ЗаказыПолучить()
	
	УстановкаСоединения();
	
	Заказ = ADOBDConnection.Execute(
	"SELECT 
	|po.order_id,
	|`customer_id`,
	|`firstname`,
	|`lastname`,
	|`email`,
	|`telephone`,
	|`payment_method`,
	|`payment_code`,
	|`shipping_firstname`,
	|`shipping_lastname`,
	|`shipping_address_1`,
	|`shipping_city`,
	|`shipping_postcode`,
	|`shipping_zone`,
	|`shipping_code`,
	|`shipping_method`,
	|`comment`,
	|CAST(po.total as char) AS total,
	|`order_status_id`,
	|`ip`,
	|po.date_added 
	|FROM `oc_order` po WHERE order_status_id <> 0 ORDER BY `order_id` ASC"
	);
	
	OrdersTable = Новый ТаблицаЗначений;
	OrdersTable.Колонки.Добавить("order_id",,"order_id",);
	OrdersTable.Колонки.Добавить("customer_id",,"customer_id",);
	OrdersTable.Колонки.Добавить("firstname",,"Имя",);
	OrdersTable.Колонки.Добавить("lastname",,"Фамилия",);
	OrdersTable.Колонки.Добавить("email",,"email",);
	OrdersTable.Колонки.Добавить("telephone",,"telephone",);
	OrdersTable.Колонки.Добавить("payment_method",,"Метод оплаты",);
	OrdersTable.Колонки.Добавить("payment_code",,"Код оплаты",);
	OrdersTable.Колонки.Добавить("shipping_method",,"Метод отправки",);
	OrdersTable.Колонки.Добавить("shipping_firstname",,"Имя получателя",);	
	OrdersTable.Колонки.Добавить("shipping_lastname",,"Фамилия получателя",);
	OrdersTable.Колонки.Добавить("shipping_address_1",,"Адрес доставки",);
	OrdersTable.Колонки.Добавить("shipping_city",,"Город",);
	OrdersTable.Колонки.Добавить("shipping_postcode",,"Индекс/Отделение",);	
	OrdersTable.Колонки.Добавить("shipping_zone",,"Область",);	
	OrdersTable.Колонки.Добавить("shipping_code",,"Метод доставки",);	
	OrdersTable.Колонки.Добавить("comment",,"Комментарий",);
	OrdersTable.Колонки.Добавить("total",,"Сумма",);
	OrdersTable.Колонки.Добавить("order_status_id",,"Статус заказа",);
	OrdersTable.Колонки.Добавить("ip",,"ip Пользователя",);	
	OrdersTable.Колонки.Добавить("po_date_added",,"Дата заказа",);	
	
	ТабТоваров = Новый ТаблицаЗначений;
	ТабТоваров.Колонки.Добавить("order_id",,"order_id",);
	ТабТоваров.Колонки.Добавить("product_id",,"product_id",);
	ТабТоваров.Колонки.Добавить("sku",,"sku",);
	ТабТоваров.Колонки.Добавить("name",,"name",); 
	ТабТоваров.Колонки.Добавить("quantity",,"quantity",); 
	ТабТоваров.Колонки.Добавить("price",,"price",); 
	ТабТоваров.Колонки.Добавить("total",,"total",); 
	
	НомСтрок = 0;
	
	НомСтрокТов = 0;
	
	Пока Заказ.Eof() = 0 Цикл
		//Состояние("Получение данных");
		
		НомСтрок = НомСтрок + 1;
		
		НС_ТабЗаказов = OrdersTable.Добавить();
		НС_ТабЗаказов.НомерСтроки = НомСтрок;
		ЗаполнитьЗначенияСвойств(НС_ТабЗаказов, Заказ.Fields);
		
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"order_id",Заказ.Fields.Item("order_id").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"customer_id",Заказ.Fields.Item("customer_id").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"firstname",Заказ.Fields.Item("firstname").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"lastname",Заказ.Fields.Item("lastname").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"email",Заказ.Fields.Item("email").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"telephone",Заказ.Fields.Item("telephone").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"payment_method",Заказ.Fields.Item("payment_method").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"payment_code",Заказ.Fields.Item("payment_code").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"total",Заказ.Fields.Item("total").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"shipping_method",Заказ.Fields.Item("shipping_method").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"shipping_code",Заказ.Fields.Item("shipping_code").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"shipping_firstname",Заказ.Fields.Item("shipping_firstname").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"shipping_lastname",Заказ.Fields.Item("shipping_lastname").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"shipping_address_1",Заказ.Fields.Item("shipping_address_1").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"shipping_city",Заказ.Fields.Item("shipping_city").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"shipping_postcode",Заказ.Fields.Item("shipping_postcode").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"shipping_zone",Заказ.Fields.Item("shipping_zone").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"comment",Заказ.Fields.Item("comment").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"order_status_id",Заказ.Fields.Item("order_status_id").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"ip",Заказ.Fields.Item("ip").value);
		//ТабЗаказов.УстановитьЗначение(НомСтрок,"po_date_added",Заказ.Fields.Item("date_added").value);
		
		//ОТСТАНОВИЛСЯ SGV	

		Товар = ADOBDConnection.Execute(
		"SELECT 
		|order_id, 
		|ocp.sku, 
		|oco.product_id, 
		|oco.name, 
		|oco.quantity, 
		|CAST(oco.price as char) AS price, 
		|CAST(oco.total as char) AS total  
		|FROM `oc_order_product` oco 
		|LEFT JOIN oc_product ocp ON ocp.product_id=oco.`product_id` 
		|WHERE `order_id` ="+Заказ.Fields.Item("order_id").value+" 
		|ORDER BY `order_id`  DESC"
		);
		Пока Товар.Eof() = 0 Цикл
			НомСтрокТов = НомСтрокТов + 1;
			ТабТоваров.НоваяСтрока(НомСтрокТов);
			ТабТоваров.УстановитьЗначение(НомСтрокТов,"order_id",Товар.Fields.Item("order_id").value);
			ТабТоваров.УстановитьЗначение(НомСтрокТов,"sku",Товар.Fields.Item("sku").value);
			ТабТоваров.УстановитьЗначение(НомСтрокТов,"product_id",Товар.Fields.Item("product_id").value);
			ТабТоваров.УстановитьЗначение(НомСтрокТов,"name",Товар.Fields.Item("name").value); 
			ТабТоваров.УстановитьЗначение(НомСтрокТов,"quantity",Товар.Fields.Item("quantity").value);
			ТабТоваров.УстановитьЗначение(НомСтрокТов,"price",Товар.Fields.Item("price").value);
			ТабТоваров.УстановитьЗначение(НомСтрокТов,"total",Товар.Fields.Item("total").value);
			Товар.MoveNext();
		КонецЦикла;
		Заказ.MoveNext();
	КонецЦикла;
КонецПроцедуры  

//
//
// Создаёт элементы в справочнике "Задачи"(Изначально создавал для создания текущих задач)
// OrdersTable - ТаблицаЗначений с глобальной областью видимости. Заполняется в процедуре ЗаказыПолучить()  
//
//

Procedure ЗаказыЗаписать()
	спрЗаказы=СоздатьОбъект("Справочник.Задачи");
	спрСтат = СоздатьОбъект("Справочник.СтатусЗаказа");
	спрСтр = СоздатьОбъект("Справочник.Сотрудники");
	спрЗаказы.ИспользоватьДату(РабочаяДата());
	НомСтрок = 0;
	Для ы=1 по OrdersTable.КоличествоСтрок() Цикл
		Если спрЗаказы.НайтиПоРеквизиту("id",OrdersTable.ПолучитьЗначение(ы,"order_id"),1) = 0 тогда
			Тел = СокрЛП(OrdersTable.ПолучитьЗначение(ы,"telephone"));
			спрЗаказы.Новый();
			спрЗаказы.id = OrdersTable.ПолучитьЗначение(ы,"order_id");
			спрЗаказы.Наименование = OrdersTable.ПолучитьЗначение(ы,"lastname")+" "+OrdersTable.ПолучитьЗначение(ы,"firstname"); 
			спрЗаказы.Фамилия = OrdersTable.ПолучитьЗначение(ы,"lastname"); 
			спрЗаказы.Телефон = Прав(Тел,10); 
			спрЗаказы.эмаил = OrdersTable.ПолучитьЗначение(ы,"email"); 
			спрЗаказы.зДата = OrdersTable.ПолучитьЗначение(ы,"po_date_added"); 
			Если спрСтр.НайтиПоКоду("5",0) = 1 тогда
				спрЗаказы.Менеджер = спрСтр.ТекущийЭлемент();
			КонецЕсли;
			Если спрСтат.НайтиПоРеквизиту("АйДи",OrdersTable.ПолучитьЗначение(ы,"order_status_id"),1) = 1 тогда
				спрЗаказы.СтатусЗаказа = спрСтат.ТекущийЭлемент();
			КонецЕсли;
			Если СокрЛП(OrdersTable.ПолучитьЗначение(ы,"payment_code")) = "privat" тогда
				спрЗаказы.МетодОплаты = Перечисления.ВидыТорговли.ПереводНаКарту;
			КонецЕсли;
			Если СокрЛП(OrdersTable.ПолучитьЗначение(ы,"payment_code")) = "cod" тогда
				спрЗаказы.МетодОплаты = Перечисления.ВидыТорговли.Наложка;
			КонецЕсли;
			Если СокрЛП(OrdersTable.ПолучитьЗначение(ы,"payment_code")) = "wayforpay" тогда
				спрЗаказы.МетодОплаты = Перечисления.ВидыТорговли.WayForPay;
			КонецЕсли;
			Если СокрЛП(OrdersTable.ПолучитьЗначение(ы,"shipping_code")) = "novaposhta.novaposhta" тогда
				нп=1;
				спрЗаказы.МетодДоствки = Перечисления.ВидДоставки.НоваяПочта;
			КонецЕсли;
			Если СокрЛП(OrdersTable.ПолучитьЗначение(ы,"shipping_code")) = "avtolux.avtolux" тогда
				спрЗаказы.МетодДоствки = Перечисления.ВидДоставки.УкрПочта;
			КонецЕсли;
			Если СокрЛП(OrdersTable.ПолучитьЗначение(ы,"shipping_code")) = "pickup.pickup" тогда
				спрЗаказы.МетодДоствки = Перечисления.ВидДоставки.Самовывоз;
			КонецЕсли;
			спрЗаказы.Область = OrdersTable.ПолучитьЗначение(ы,"shipping_city");// OrdersTable.ПолучитьЗначение(ы,"shipping_zone");
			спрЗаказы.Город = OrdersTable.ПолучитьЗначение(ы,"shipping_city");
			спрЗаказы.ИндексОтдел = OrdersTable.ПолучитьЗначение(ы,"shipping_postcode");
			Если нп =1 тогда 
				РефГород = OrdersTable.ПолучитьЗначение(ы,"shipping_address_1");
				Город = Лев(РефГород,Найти(РефГород,";")-1);
				Отделение = Сред(РефГород,Найти(РефГород,";")+1);
				спрЗаказы.РефОбл = Город;
				спрЗаказы.РефОтделения = Отделение; 
		
				спрЗаказы.Адрес = СокрЛП(OrdersTable.ПолучитьЗначение(ы,"shipping_city"))+", "+СокрЛП(OrdersTable.ПолучитьЗначение(ы,"shipping_postcode")); 
			иначе
				спрЗаказы.Адрес = OrdersTable.ПолучитьЗначение(ы,"shipping_address_1");
			КонецЕсли;
			спрЗаказы.Статус = Перечисления.ДаНет.Нет;
			//спрЗаказы.Адрес = OrdersTable.ПолучитьЗначение(ы,"shipping_address_1");
			спрЗаказы.ТелефонПол = спрЗаказы.Телефон;
			спрЗаказы.Плательщик = Перечисления.Плательщик.Recipient;
			спрЗаказы.Сумма = Формат(OrdersTable.ПолучитьЗначение(ы,"total"),"Ч12.2");
			спрКл = СоздатьОбъект("Справочник.Clients");
			спрКл.ИспользоватьДату(РабочаяДата());
			Если (спрКл.НайтиПоРеквизиту("Email",OrdersTable.ПолучитьЗначение(ы,"email"),1) = 1) или (спрКл.НайтиПоРеквизиту("Телефоны",OrdersTable.ПолучитьЗначение(ы,"telephone"),1) = 1)  тогда
				спрЗаказы.зКлиент = спрКл.ТекущийЭлемент();
			иначе
				Родитель = SelectedCustomers.Родитель;
				спрКл.ИспользоватьРодителя(Родитель);
				спрКл.Новый();
				спрКл.Код_ = Строка(OrdersTable.ПолучитьЗначение(ы,"customer_id"));
				спрКл.Наименование = Строка(OrdersTable.ПолучитьЗначение(ы,"firstname")+" "+OrdersTable.ПолучитьЗначение(ы,"lastname")); 
				спрКл.ПолнНаименование = спрКл.Наименование;
				спрКл.Адрес = Строка(OrdersTable.ПолучитьЗначение(ы,"shipping_zone"))+" "+Строка(OrdersTable.ПолучитьЗначение(ы,"shipping_city"))+" "+Строка(OrdersTable.ПолучитьЗначение(ы,"shipping_address_1")); 
				спрКл.ФизАдрес = спрКл.Адрес;
				спрКл.Телефоны = OrdersTable.ПолучитьЗначение(ы,"telephone");
				спрКл.ВалютаВзаиморасчетов = Константы.Гривня;
				спрКл.TradeType = Перечисления.ВидыТорговли.Предоплата;
				спрКл.ВозСкидка = Перечисления.ВариантыСкидок.БезСкидки;
				спрКл.ЗапрВыдачи = Перечисления.ДаНет.Нет; 
				спрКл.ТипЦен = Перечисления.PriceTypes.Category2;
				спрКл.Email = OrdersTable.ПолучитьЗначение(ы,"email");
				спрКл.Записать();
				спрЗаказы.зКлиент = спрКл.ТекущийЭлемент();
			КонецЕсли;
			спрЗаказы.зДата = OrdersTable.ПолучитьЗначение(ы,"po_date_added");  
			спрЗаказы.Описание = OrdersTable.ПолучитьЗначение(ы,"comment");
			//++++++++++++++++++++++++++++++++++++++++  Список проданных товаров сворачиваю в строку и записываю в реквизит, который имеет тип - строка
			Если ProductTable.КоличествоСтрок() <> 0 тогда
				ProductTable.ВыбратьСтроки();
				_Строка = СоздатьОбъект("СписокЗначений");
				пр2 = 0;
				Для а = 1 По ProductTable.КоличествоСтрок() Цикл
					пр1 = СокрЛП(ProductTable.ПолучитьЗначение(а,"order_id")); 
					пр2 = СокрЛП(спрЗаказы.id);
					Если пр1 = пр2 тогда
						_Значение = "sku#"+Строка(СокрЛП(ProductTable.ПолучитьЗначение(а,"sku")));
						_Строка.ДобавитьЗначение(_Значение);
						_Значение = "pid#"+Строка(СокрЛП(ProductTable.ПолучитьЗначение(а,"product_id")));
						_Строка.ДобавитьЗначение(_Значение);
						_Значение = "nam#"+Строка(СокрЛП(ProductTable.ПолучитьЗначение(а,"name")));
						_Строка.ДобавитьЗначение(_Значение);
						_Значение = "qua#"+Строка(СокрЛП(ProductTable.ПолучитьЗначение(а,"quantity")));
						_Строка.ДобавитьЗначение(_Значение);
						_Значение = "pri#"+Строка(СокрЛП(ProductTable.ПолучитьЗначение(а,"price")));
						_Строка.ДобавитьЗначение(_Значение);                                     
					КонецЕсли;
				КонецЦикла;
				спрЗаказы.Товар = _Строка.ВСтрокуСРазделителями(); 
			КонецЕсли;
			//++++++++++++++++++++++++++++++++++++++++
			спрЗаказы.Записать();
			Сообщить(Шаблон("Новый заказ: [спрЗаказы.id] Имя: [спрЗаказы.Наименование] [спрЗаказы.Фамилия] сумма: [Формат(OrdersTable.ПолучитьЗначение(ы,""total""),""Ч12.2"")]"));
			ServiceParameters.ДобавитьЗначение("Новый заказ: "+спрЗаказы.id);
			ServiceParameters.ДобавитьЗначение("ФИО: "+спрЗаказы.Фамилия+" "+спрЗаказы.Наименование);
			ServiceParameters.ДобавитьЗначение("Телефон: "+спрКл.Телефоны);
			ServiceParameters.ДобавитьЗначение("Сумма: "+Формат(OrdersTable.ПолучитьЗначение(ы,"total"),"Ч12.2"));
			ServiceParameters.ДобавитьЗначение("----------------------------");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Формимует документ "РасходнаяНакладная" на основе данных полученных с сайта
//
// var ДанныеДляДокумента - Таблица значений 
// 	Колонка("sku",,30,," ",2,,);
//  Колонка("quan",,,,,5,,);
//	Колонка("price",,,,"Наименование",35,,);
//  
//
Procedure СформироватьНакладную(ДанныеДляДокумента)
	КонтекстФормы2 = "";
	спрСтр = СоздатьОбъект("Справочник.Сотрудники");
	_Клиент = ДанныеДляДокумента.ПолучитьЗначение(1,"sku");
	Заказ = ДанныеДляДокумента.ПолучитьЗначение(2,"sku"); 
	КодМенеджер = ДанныеДляДокумента.ПолучитьЗначение(1,"price");  
	спрКлиент = СоздатьОбъект("Справочник.Clients");
	спрКлиент.ИспользоватьДату(РабочаяДата());
	Если спрКлиент.НайтиПоКоду(_Клиент,0) = 1 тогда
		Клиент = спрКлиент.ТекущийЭлемент();
	КонецЕсли;
	НачатьТранзакцию();
	док = СоздатьОбъект("Документ.РасходнаяНакладная"); 
	спрТов = СоздатьОбъект("Справочник.ТМЦ");
	спрТов.ИспользоватьДату(РабочаяДата());
	док.Новый();
	//	Если ПустоеЗначение(ДанныеДляДокумента.ПолучитьЗначение(2,"дата")) = 1 тогда
	док.ДатаДок=РабочаяДата(); 
	//	иначе
	//		док.ДатаДок = ДанныеДляДокумента.ПолучитьЗначение(2,"дата")
	//	КонецЕсли;
	//	док.НомерДок = Лев(ИмяПользователя(),1)+"_"+док.НомерДок; 
	//    Сообщить(док.НомерДок);
	док.Клиент = Клиент;
	док.Валюта = док.Клиент.ВалютаВзаиморасчетов;
	Если Клиент.CounterpartyType = Перечисления.CounterpartyType.TT тогда
		спрСклад = СоздатьОбъект("Справочник.Warehouses");
		Если спрСклад.НайтиПоНаименованию(Клиент.Наименование,0,1) = 1 тогда
			док.Склад = спрСклад.ТекущийЭлемент();
		КонецЕсли;
	иначе
		док.Склад = Константы.БазСклад;
	КонецЕсли;
	
	док.AccountingType = Перечисления.ВидыУчета.Совместный;
	Если спрСтр.НайтиПоКоду(СокрЛП(КодМенеджер),0) = 1 тогда
		док.Менеджер = спрСтр.ТекущийЭлемент();
	КонецЕсли;
	//док.Менеджер = док.Клиент.Менеджер;
	док.ВидНДС = Константы.БазНДС.Получить(РабочаяДата()); 
	док.TradeType = док.Клиент.TradeType;
	док.ТипЦен = док.Клиент.ТипЦен;
	док.Курс = КурсДляВалюты(док.Валюта,док.ДатаДок);
	док.СчетПокупателя = СчетПоКоду("62.2");
	док.Фирма = Константы.БазФирма.Получить(ТекущаяДата());
	док.Отпустил = Константы.БазОтпустил;
	док.СубконтоВалДох = Константы.БазВалДоход;
	док.Основание = Строка("Создан на основании заказа "+Заказ);
	НомСтрок = 0;
	НомСтрокДок = 0;
	Для ы = 1 По ДанныеДляДокумента.КоличествоСтрок() Цикл
		НомСтрокДок = НомСтрокДок+1;
		Код = СокрЛП(ДанныеДляДокумента.ПолучитьЗначение(НомСтрокДок,"sku")); 
		Количество = СокрЛП(ДанныеДляДокумента.ПолучитьЗначение(НомСтрокДок,"quan"));  
		ЦенаПродажи = СокрЛП(ДанныеДляДокумента.ПолучитьЗначение(НомСтрокДок,"price"));  
		Если НомСтрокДок > 2 тогда
			sku = СокрЛП(Код);
			//Состояние(Шаблон("Обработка строки [НомСтрокДок] поиск: [sku]"));
			Если спрТов.НайтиПоКоду(sku,0) = 1 тогда
				НомСтрок = НомСтрок+1;
				док.НоваяСтрока();
				док.КодТов = спрТов.КодТов;
				док.ШтрихКод = спрТов.ШтрихКод;
				док.ТМЦ = спрТов.ТекущийЭлемент();
				док.Кво = Количество;
				спрЕд = СоздатьОбъект("Справочник.ЕдИзм");
				спрЕд.ИспользоватьВладельца(док.ТМЦ);
				спрЕд.ВыбратьЭлементы();
				Пока спрЕд.ПолучитьЭлемент()>0 Цикл
					Если спрЕд.Ед=док.ТМЦ.БазЕдиница Тогда
						док.Ед = спрЕд.ТекущийЭлемент();
						док.Коэффициент = спрЕд.Коэффициент;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ПустоеЗначение(ЦенаПродажи) = 0 тогда
					док.ЦенаБезНДС = ЦенаПродажи;
				иначе
					Если док.Клиент.ТипЦен = Перечисления.PriceTypes.Category1 тогда 
						Если ЦенаПродажи = док.ТМЦ.Цена1 тогда
							док.ЦенаБезНДС = док.ТМЦ.Цена1;
						иначе
							док.ЦенаБезНДС = ЦенаПродажи;
						КонецЕсли;
					КонецЕсли;
					Если док.Клиент.ТипЦен = Перечисления.PriceTypes.Category2 тогда 
						Если ЦенаПродажи = док.ТМЦ.Цена2 тогда
							док.ЦенаБезНДС = док.ТМЦ.Цена2;
						иначе
							док.ЦенаБезНДС = ЦенаПродажи;
						КонецЕсли;
					КонецЕсли;
					Если док.Клиент.ТипЦен = Перечисления.PriceTypes.Category3 тогда
						Если ЦенаПродажи = док.ТМЦ.Цена3 тогда
							док.ЦенаБезНДС = док.ТМЦ.Цена3;
						иначе
							док.ЦенаБезНДС = ЦенаПродажи;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				док.СуммаБезНДС = Число(док.ЦенаБезНДС*док.Кво);
				док.СуммаБезСкидки = док.СуммаБезНДС; 
				док.СуммаСНДС= док.СуммаБезНДС;
				Если (док.ТМЦ.Вид = Перечисления.TypesOfInventory.Товар) или (док.ТМЦ.Вид = Перечисления.TypesOfInventory.Телефон)  тогда
					спрПартии = СоздатьОбъект("Справочник.Партии");
					спрПартии.ИспользоватьДату(РабочаяДата());
					спрПартии.ИспользоватьВладельца(док.ТМЦ);
					спрПартии.ВыбратьЭлементы();
					Пока спрПартии.ПолучитьЭлемент() = 1 Цикл
						Если (РегистрыНакопления.Remains.СводныйОстаток(0,док.ТМЦ,док.Склад,спрПартии.ТекущийЭлемент(),"Кво")>док.Кво) или (РегистрыНакопления.Remains.СводныйОстаток(0,док.ТМЦ,док.Склад,спрПартии.ТекущийЭлемент(),"Кво")=док.Кво) тогда
							док.Партия = спрПартии.ТекущийЭлемент();
							док.ЦенаЗакупки = спрПартии.Цена_Уч;
							док.СуммаЗакупки = Число(спрПартии.Цена_Уч*Количество); 
							Прервать;
						КонецЕсли;
					КонецЦикла; 
				иначе
					Спр = СоздатьОбъект("Справочник.Партии");
					Спр.ИспользоватьВладельца(док.ТМЦ);
					Если Спр.НайтиПоКоду(0)=0 Тогда  // всегда с нулевым кодом
						Спр.Новый();
						Спр.Код = 0;
						Спр.Владелец = док.ТМЦ;
						Спр.Наименование = "Партия по умолчанию";
						Спр.Записать();
					КонецЕсли;
					док.Партия = Спр.ТекущийЭлемент();
					док.ЦенаЗакупки = док.ТМЦ.Цена_Прих*док.Курс;
					док.СуммаЗакупки = Число(док.ЦенаЗакупки*Количество);
				КонецЕсли;	
			иначе
				Сообщить(" В справочнике товаров не обнаружен данный продукт: "+Код);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	док.Записать(); 
	ЗафиксироватьТранзакцию();
	КонтекстФормы2 = док.ТекущийДокумент();
	Константы.УстановитьАтрибут("НомерДокИнтернетМагазин",док.ТекущийДокумент());
	Сообщить("СозданнаНакладная "+док.ТекущийДокумент());
КонецПроцедуры

Procedure ВыгрузитьОстатки()
	УстановкаСоединения();
	ЗапросНоменклатура = СоздатьОбъект("Запрос");
	ТекстЗапроса = 	"//{{ЗАПРОС(ВыбратьНоменклатуру)
	|Номенклатура = Справочник.ДопРеквизиты.ТекущийЭлемент;
	|НоменклатураТМЦ = Справочник.ДопРеквизиты.ТМЦ.ТекущийЭлемент;
	|НоменклатураЦена = Справочник.ДопРеквизиты.ТМЦ.ТекущийЭлемент.Цена2;
	|Условие(Номенклатура.АйДи <> 0);
	|Условие(Номенклатура.Включить = Перечисление.ДаНет.Да);
	|Группировка Номенклатура;
	|Функция Сч = Счётчик();
	|";//}}ЗАПРОС
	Если ЗапросНоменклатура.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	Кол = 0;
	Размер = ЗапросНоменклатура.Сч;
	Пока ЗапросНоменклатура.Группировка(1) = 1 Цикл
		Номенклатура = ЗапросНоменклатура.Номенклатура;
		НоменклатураТМЦ = ЗапросНоменклатура.НоменклатураТМЦ; 
		НоменклатураЦена = ЗапросНоменклатура.НоменклатураЦена;
		Если Номенклатура.ЭтоГруппа() = 0 тогда
			Кол = Кол+1;
			глПрогрессор("Выгружаю Остатки",Размер,Кол);
			Ид = СокрЛП(Номенклатура.АйДи);
			Остаток = РегистрыНакопления.Remains.СводныйОстаток(0,НоменклатураТМЦ,Константы.БазСклад,,"Кво");
			Запрос = "UPDATE `oc_product` SET `quantity` = "+Остаток+", `price`="+НоменклатураЦена+" WHERE `product_id` = "+Ид; 
			ADOBDConnection.Execute(Запрос);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


Procedure УведомлениеТелеграмм()
	Если ServiceParameters.РазмерСписка() > 0 тогда
		ОткрытьФорму("Обработка.Бот_Телеграм",ServiceParameters);
	КонецЕсли;
КонецПроцедуры

Procedure ПриОткрытии()
	//ВыгрузитьОстатки();
	//Состояние("Получение и обработка данных с CaseRoom.in.ua");
	ServiceParameters=СоздатьОбъект("СписокЗначений");
	Если ПустоеЗначение(ЭтаФорма.Parameters) = 0 тогда
		Если ЭтаФорма.ServiceParameters = "1" тогда
			ВыгрузитьОстатки();
		иначе
			ДанныеДляДокумента = ЭтаФорма.ServiceParameters;
			СформироватьНакладную(ДанныеДляДокумента);
		КонецЕсли; 
		ЭтаФорма.Закрыть();
	иначе
		ЗаказыПолучить();
		ЗаказыЗаписать();
		УведомлениеТелеграмм();	
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

Функция КаталогИБ()
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	Если ПозицияПоиска = 1 тогда
		// Файловая 
		Возврат Сред(СтрокаСоединенияСБД, 6,СтрДлина(СтрокаСоединенияСБД)-6);
		Иначе 
		// Серверная - Используем КаталогВременныхФайлов() 
		Возврат КаталогВременныхФайлов();
	КонецЕсли;
КонецФункции
